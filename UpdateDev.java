/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package testing;

/**
 *
 * @author user
 */
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class UpdateDev extends javax.swing.JFrame {
    
    Connection con;
    /**
     * Creates new form ShowDevices
     */
    public UpdateDev() {
        initComponents();
        con=MyConnection.getConnection();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        find = new javax.swing.JButton();
        SearchField = new javax.swing.JTextField();
        searchLabel = new javax.swing.JLabel();
        update = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Serial Number", "Device Name", "Model", "Quantity", "Device Condition", "Size", "SN", "Type", "Office Number", "Em Name"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        find.setText("Find");
        find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findActionPerformed(evt);
            }
        });

        searchLabel.setText("Enter the SN");

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 752, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(58, 58, 58)
                                .addComponent(find)))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(update)
                        .addGap(356, 356, 356))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(find)
                    .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchLabel))
                .addGap(94, 94, 94)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(update)
                .addContainerGap(110, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findActionPerformed
        String sn = SearchField.getText(); //store the Serial number in this variable
        
        try{
            PreparedStatement ps = con.prepareStatement("select * from devices where SerialNumber = \""+sn+"\"");
            ResultSet rs = ps.executeQuery();
            DefaultTableModel dtm = (DefaultTableModel)jTable1.getModel();
            dtm.setRowCount(0);
            while(rs.next()){
                String s = rs.getString("Office_Office_Number");
                System.out.println(s);
                //inner join betweent the tables employeetooffice and employee to get the employee name
                PreparedStatement ps2=con.prepareStatement("""
                                                       select employeetooffice.Date, employeetooffice.Office_Office_Number, employeetooffice.Employee_Job_ID, employee.E_Name
                                                       from employeetooffice join employee
                                                       on employeetooffice.Employee_Job_ID = employee.Job_ID
                                                       where employeetooffice.Office_Office_Number="""+s, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet rs2=ps2.executeQuery();
                if(rs2.next()){  //if the office is assigned to an employee display the name
                    dtm.addRow(new Object[]{
                        rs.getString("SerialNumber"),
                        rs.getString("DeviceName"),
                        rs.getString("Model"),
                        rs.getString("Quantity"),
                        rs.getString("DeviceCondition"),
                        rs.getString("M_Size"),
                        rs.getString("M_SN"),
                        rs.getString("M_Type"),
                        rs.getString("Office_Office_Number"),
                        rs2.getString("E_Name")
                    });
                }
                else if(!rs2.next()){ //if the office is not assigned to an employee leave the column empty.
                    dtm.addRow(new Object[]{
                        rs.getString("SerialNumber"),
                        rs.getString("DeviceName"),
                        rs.getString("Model"),
                        rs.getString("Quantity"),
                        rs.getString("DeviceCondition"),
                        rs.getString("M_Size"),
                        rs.getString("M_SN"),
                        rs.getString("M_Type"),
                        rs.getString("Office_Office_Number")
                    });
                }
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_findActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed

        namedBlock:{
            int rowCount = jTable1.getRowCount();  //get the row count in the table
            String[][] tableData = new String[rowCount][10]; //setting an array to store the elemnt in he cells in the table
            for(int i = 0; i < rowCount; i++) // nested for loop to store the table elements in two Dimensional arry
            {
                for(int j = 0; j < 10; j++)
                {
                    /*why I made this if statement? in the DB sometimes an office wom't be signed to an emplyee
                    so if items added to this office and then diplyed the employee name won't be shown because 
                    the office is not sined to an emplyee yet. The column 9 is the employee column in the jTable
                    so we have to check if it does't contain any value so we don't face any errors in the toString()
                    metgod*/
                    if(j==9){
                        String value=(String)jTable1.getValueAt(i, j);
                        if(value == null){
                            tableData[i][j]=null;
                        }
                        else if(value!=null){
                            tableData[i][j] = jTable1.getValueAt(i, j).toString();
                        }

                    }
                    else{
                        tableData[i][j] = jTable1.getValueAt(i, j).toString();
                    }

                }
            }

            for(int i =0; i<rowCount; i++){ //nested loop to get the elements from the array to be stored in the DB
                for(int j=0; j<10; j++){
                    int column = j; 
                    String sn = tableData [i][0]; //to use the SN as a condition in the sql statement
                    switch(column){ //cases named depending on the columns numbers
                        case 0:
                            break; //the user not allowed to change the SN
                        case 1:
                            String name = tableData [i][j];
                            state("DeviceName",name, sn);
                            break;
                        case 2:
                            String model = tableData [i][j];
                            state("Model", model, sn);
                            break;
                        case 3:
                            String quantity = tableData [i][j];
                            state("Quantity", quantity, sn);
                            break;
                        case 4:
                            String condition = tableData [i][j];
                            state("DeviceCondition", condition, sn);
                            break;
                        case 5:
                            String size = tableData [i][j];
                            state("M_Size", size, sn);
                            break;
                        case 6:
                            String mSN = tableData [i][j];
                            state("M_SN", mSN, sn);
                            break;
                        case 7:
                            String type = tableData [i][j];
                            state("M_Type", type, sn);
                            break;
                        case 8:
                            String office = tableData [i][j];
                            boolean check =checkOffice(office, "Office_Office_Number", office, sn);
                            if(check){ //if the office number correct
                                checkOffice(office, "Office_Office_Number", office, sn); //update
                            }
                            else{ //if the office number incorrect stop this proccess
                                break namedBlock;
                            }
                            break;
                        case 9:
                            break; //the employee name will be changed from another frame
                        default:
                            System.out.println("default");
                    }
                }
            }

            JOptionPane.showMessageDialog(rootPane, "Updated seccessfully", null, JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_updateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateDev.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateDev.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateDev.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateDev.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateDev().setVisible(true);
            }
        });
    }
    
    
    /*this method for updating the new data in the DB for all the columns exept the office column*/
    public void state(String columnName, String newValue, String condition){
        try{
            PreparedStatement ps = con.prepareStatement("update devices set "+columnName+" = \""+newValue+"\" where SerialNumber = \""+condition+"\"");
            ps.execute();
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
    
    /*as the new office number need to be checked if it's in the DB or not, this method will do the job*/
    public boolean checkOffice(String office, String columnName, String newValue, String condition){
        boolean conditionIf = false;
            try{
                PreparedStatement ps = con.prepareStatement("select * from office where Office_Number = \""+office+"\"");
                ResultSet rs = ps.executeQuery();
                if(rs.next()){ //if the office number in the DB
                    state(columnName, newValue, condition); //call state method to do the update
                    conditionIf=true;
                }
                else if(!rs.next()){ //if the office number is not in the DB 
                    JOptionPane.showMessageDialog(rootPane, "office number is incorrect", null, JOptionPane.WARNING_MESSAGE);
                }
            }
            catch(Exception e){
                e.printStackTrace();
            }
        return conditionIf;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField SearchField;
    private javax.swing.JButton find;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}